#!/bin/sh

#
# Configuration:
#

# How long to wait for graphviz to plot a graph (in seconds)
#  After this period plotting is attempted once again with simpler graph layout
#  algorithm (dot) and if that also fail, no output is generated.
#  NOTE: It is normal for large graphs to take a lot of time so set it
#  according to your needs.
DRAWING_TIME_OUT=10

# Path to tcpdump binnary
TCPDUMP=/usr/sbin/tcpdump

# Path to parser (taking tcpdump output and storing output in database)
PARSER="./tcpdump2sqlite.pl -q"

# Path to sqlite binary
SQLITE=sqlite3

# Database schema
DB_SCHEMA=../database/schema.sql

####################################
# No more configuration variables. #
####################################

cleanflag=off
mergeflag=off
drawflag=off
graphsflag=off
databaseflag=off
htmlflag=off

function usage {
	echo >&2  "Usage: $0 --db [--merge] file [file ...]"
	echo >&2  "       $0 <action ...> [database ...]"
	echo >&2  "       $0 --clean"
	echo >&2  ""
	echo >&2  "Actions:"
	echo >&2  "    --db     - create database from libpcap capture file"
	echo >&2  "    --graphs - use database to generate GraphViz graphs"
	echo >&2  "    --draw   - render graphs into svg files"
	echo >&2  "    --html   - create html pages"
	echo >&2  "    --clean  - remove all generated files"
	echo >&2  ""
	echo >&2  "Options:"
	echo >&2  "    --merge  - normally if you supply several capture files"
	echo >&2  "               seperate database is generated for each,"
	echo >&2  "               with this option only one databse is created"
	echo >&2  ""
	echo >&2  "By default --graphs --draw --html is assumed. If you don't supply"
	echo >&2  "any input, every 'packets.db' file found under 'output' directory"
	echo >&2  "is used"
	echo >&2  ""
	echo >&2  "Note, you cannot mix --db nor --clean with other actions."
}

function do_clean {
	echo -n "Cleaning... "
	rm -rf output
	echo "done."
}

function do_database_aux_tables {
    ./process-post-process-db.py --database "$1"
}

function timeout {
	TIME=$1
	shift
	(
		$@ 
	) &
	PID=$!

	for (( s = 0; s < $TIME; s++ )) do
		if ! ps -p $PID > /dev/null  ; then
			break
		fi
		sleep 1
	done

	if ps -p $PID > /dev/null ; then
		kill $PID
		return 1
	fi

	return 0
}

function do_database {
	if [ "$mergeflag" == "on" ]; then
		DIR=output/merged
		mkdir -p "${DIR}" || exit 1

		DB="${DIR}/packets.db"
		${SQLITE} "${DB}" ".read ${DB_SCHEMA}"

		for dump in ${@}; do
			echo -n "Processing ${dump}... "

			${TCPDUMP} -vttttnel -r "${dump}" 2>/dev/null |\
			${PARSER} "${DB}"

			echo "done."
		done
		do_database_aux_tables "${DB}"

	else
		for dump in ${@}; do
			BASE=$(basename -- "${dump}")
			DIR=output/"$BASE"
			mkdir -p "${DIR}" || exit 1

			DB="${DIR}/packets.db"

			if [ "${dump}" -nt "${DB}" ]; then
				echo -n "Processing ${dump}... "
				rm -f ${DB}
				rm -f ${DB}-journal
				${SQLITE} "${DB}" ".read ${DB_SCHEMA}"

				${TCPDUMP} -vttttnel -r "${dump}" 2>/dev/null |\
				${PARSER} "${DB}"
				do_database_aux_tables "${DB}"
				echo "done."
			fi
		done
	fi
}

function do_graphs {
    DB="$1"
    OUTPUT="$(dirname -- ${DB})/tmp-"
    echo -n "Generating graph for ${DB}... "
    ./sqlite2gv.py --database "${DB}" -o "${OUTPUT}"
    echo "done."
}


function do_draw_graph {
	if [ "$3" -nt "$4" ]; then
		echo -n "Drawing $4... "
		timeout "$DRAWING_TIME_OUT" $1 "$3" -T$2 -o "$4"
		if [ "$?" -ne "0" ]; then
			rm -f "$4"
			if [ "$1" != "dot" ]; then
				echo "drawing with $1 took too long, falling back to dot"
				do_draw_graph dot "$2" "$3" "${4%$1.$2}dot.$2"
			else
				echo "drawing with dot took too long, graph too large"
				rm -f "$4"
			fi
		fi
		echo "done."
	fi
}

function do_draw {
	DB="$1"
	DIR="$(dirname -- ${DB})"

	do_draw_graph circo svg "${DIR}/tmp-ip-multicast.gv"            "${DIR}/ip-multicast.svg"
	do_draw_graph dot   svg "${DIR}/tmp-ip-port.gv"                 "${DIR}/ip-port.svg"
	do_draw_graph twopi svg "${DIR}/tmp-nodes-connections-count.gv" "${DIR}/nodes-connections.svg"
}

function do_html {
	echo -n "Generating HTML... "
	DB="$1"
	DIR="$(dirname -- ${DB})"
	./html.py --database "${DB}" --dir "${DIR}"
	echo "done."
}

function do_foreach_database {
    FUNCTION="$1"
    shift
    if [ $# -gt 0 ]; then
        for DB in $@; do
            ${FUNCTION} "${DB}"
        done
    else
        find -name 'packets.db' -print | while read DB
        do
            ${FUNCTION} "${DB}"
        done
    fi
}

while [ $# -gt 0 ]; do
	case "$1" in
		--db)
			databaseflag=on;;
		--merge)
			mergeflag=on;;
		--graphs)
			graphsflag=on;;
		--draw)
			drawflag=on;;
		--html)
			htmlflag=on;;
		--clean)
			cleanflag=on;;
		--) shift; break;;
		-*)
			usage;
			exit 1;;
		*) break;;
	esac
	shift
done

if ( [ "$databaseflag" == "on" ] || [ "$cleanflag" == "on" ] ) &&
   ( [ "$graphsflag" == "on" ] || [ "$drawflag" == "on" ] || [ "$htmlflag" == "on" ] ); then
	echo >&2  "Error, you cannot mix --db nor --clean with other actions."
	usage
	exit 1
fi

if [ "$graphsflag" == "off" ] && [ "$databaseflag" == "off" ] && [ "$drawflag" == "off" ] && [ "$htmlflag" == "off" ]; then
	graphsflag=on
	drawflag=on
	htmlflag=on
fi

if [ $cleanflag == "off" ] && [ "$databaseflag" == "on" ] && [ $# -le 0 ]; then
	echo >&2 "no files given on command line"
	usage;
	exit 1;
fi

if [ $cleanflag == "on" ]; then
	do_clean
	exit $?
fi

if [ $databaseflag == "on" ]; then
	do_database $@ || exit 1;
fi

if [ $graphsflag == "on" ]; then
    do_foreach_database do_graphs $@ || exit 1;
fi

if [ $drawflag == "on" ]; then
    do_foreach_database do_draw $@ || exit 1;
fi

if [ $htmlflag == "on" ]; then
    do_foreach_database do_html $@ || exit 1;
fi
